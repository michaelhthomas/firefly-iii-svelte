/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v2.0.10
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-10-15T12:13:25+00:00  Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: 2.0.10
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AccountRoleProperty } from './AccountRoleProperty';
import {
    AccountRolePropertyFromJSON,
    AccountRolePropertyFromJSONTyped,
    AccountRolePropertyToJSON,
} from './AccountRoleProperty';
import type { CreditCardType } from './CreditCardType';
import {
    CreditCardTypeFromJSON,
    CreditCardTypeFromJSONTyped,
    CreditCardTypeToJSON,
} from './CreditCardType';
import type { InterestPeriod } from './InterestPeriod';
import {
    InterestPeriodFromJSON,
    InterestPeriodFromJSONTyped,
    InterestPeriodToJSON,
} from './InterestPeriod';
import type { LiabilityDirection } from './LiabilityDirection';
import {
    LiabilityDirectionFromJSON,
    LiabilityDirectionFromJSONTyped,
    LiabilityDirectionToJSON,
} from './LiabilityDirection';
import type { LiabilityType } from './LiabilityType';
import {
    LiabilityTypeFromJSON,
    LiabilityTypeFromJSONTyped,
    LiabilityTypeToJSON,
} from './LiabilityType';
import type { ShortAccountTypeProperty } from './ShortAccountTypeProperty';
import {
    ShortAccountTypePropertyFromJSON,
    ShortAccountTypePropertyFromJSONTyped,
    ShortAccountTypePropertyToJSON,
} from './ShortAccountTypeProperty';

/**
 * 
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * 
     * @type {Date}
     * @memberof Account
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof Account
     */
    readonly updatedAt?: Date;
    /**
     * If omitted, defaults to true.
     * @type {boolean}
     * @memberof Account
     */
    active?: boolean;
    /**
     * Order of the account. Is NULL if account is not asset or liability.
     * @type {number}
     * @memberof Account
     */
    order?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    name: string;
    /**
     * 
     * @type {ShortAccountTypeProperty}
     * @memberof Account
     */
    type: ShortAccountTypeProperty;
    /**
     * 
     * @type {AccountRoleProperty}
     * @memberof Account
     */
    accountRole?: AccountRoleProperty | null;
    /**
     * Use either currency_id or currency_code. Defaults to the user's default currency.
     * @type {string}
     * @memberof Account
     */
    currencyId?: string;
    /**
     * Use either currency_id or currency_code. Defaults to the user's default currency.
     * @type {string}
     * @memberof Account
     */
    currencyCode?: string;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    readonly currencySymbol?: string;
    /**
     * 
     * @type {number}
     * @memberof Account
     */
    readonly currencyDecimalPlaces?: number;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    readonly currentBalance?: string;
    /**
     * The timestamp for this date is always 23:59:59, to indicate it's the balance at the very END of that particular day.
     * @type {Date}
     * @memberof Account
     */
    readonly currentBalanceDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    iban?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    bic?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    accountNumber?: string | null;
    /**
     * Represents the opening balance, the initial amount this account holds.
     * @type {string}
     * @memberof Account
     */
    openingBalance?: string;
    /**
     * Represents the current debt for liabilities.
     * @type {string}
     * @memberof Account
     */
    currentDebt?: string | null;
    /**
     * Represents the date of the opening balance.
     * @type {Date}
     * @memberof Account
     */
    openingBalanceDate?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    virtualBalance?: string;
    /**
     * If omitted, defaults to true.
     * @type {boolean}
     * @memberof Account
     */
    includeNetWorth?: boolean;
    /**
     * 
     * @type {CreditCardType}
     * @memberof Account
     */
    creditCardType?: CreditCardType | null;
    /**
     * Mandatory when the account_role is ccAsset. Moment at which CC payment installments are asked for by the bank.
     * @type {Date}
     * @memberof Account
     */
    monthlyPaymentDate?: Date | null;
    /**
     * 
     * @type {LiabilityType}
     * @memberof Account
     */
    liabilityType?: LiabilityType | null;
    /**
     * 
     * @type {LiabilityDirection}
     * @memberof Account
     */
    liabilityDirection?: LiabilityDirection | null;
    /**
     * Mandatory when type is liability. Interest percentage.
     * @type {string}
     * @memberof Account
     */
    interest?: string | null;
    /**
     * 
     * @type {InterestPeriod}
     * @memberof Account
     */
    interestPeriod?: InterestPeriod | null;
    /**
     * 
     * @type {string}
     * @memberof Account
     */
    notes?: string | null;
    /**
     * Latitude of the accounts's location, if applicable. Can be used to draw a map.
     * @type {number}
     * @memberof Account
     */
    latitude?: number | null;
    /**
     * Latitude of the accounts's location, if applicable. Can be used to draw a map.
     * @type {number}
     * @memberof Account
     */
    longitude?: number | null;
    /**
     * Zoom level for the map, if drawn. This to set the box right. Unfortunately this is a proprietary value because each map provider has different zoom levels.
     * @type {number}
     * @memberof Account
     */
    zoomLevel?: number | null;
}

/**
 * Check if a given object implements the Account interface.
 */
export function instanceOfAccount(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function AccountFromJSON(json: any): Account {
    return AccountFromJSONTyped(json, false);
}

export function AccountFromJSONTyped(json: any, ignoreDiscriminator: boolean): Account {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'updatedAt': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
        'active': !exists(json, 'active') ? undefined : json['active'],
        'order': !exists(json, 'order') ? undefined : json['order'],
        'name': json['name'],
        'type': ShortAccountTypePropertyFromJSON(json['type']),
        'accountRole': !exists(json, 'account_role') ? undefined : AccountRolePropertyFromJSON(json['account_role']),
        'currencyId': !exists(json, 'currency_id') ? undefined : json['currency_id'],
        'currencyCode': !exists(json, 'currency_code') ? undefined : json['currency_code'],
        'currencySymbol': !exists(json, 'currency_symbol') ? undefined : json['currency_symbol'],
        'currencyDecimalPlaces': !exists(json, 'currency_decimal_places') ? undefined : json['currency_decimal_places'],
        'currentBalance': !exists(json, 'current_balance') ? undefined : json['current_balance'],
        'currentBalanceDate': !exists(json, 'current_balance_date') ? undefined : (new Date(json['current_balance_date'])),
        'iban': !exists(json, 'iban') ? undefined : json['iban'],
        'bic': !exists(json, 'bic') ? undefined : json['bic'],
        'accountNumber': !exists(json, 'account_number') ? undefined : json['account_number'],
        'openingBalance': !exists(json, 'opening_balance') ? undefined : json['opening_balance'],
        'currentDebt': !exists(json, 'current_debt') ? undefined : json['current_debt'],
        'openingBalanceDate': !exists(json, 'opening_balance_date') ? undefined : (json['opening_balance_date'] === null ? null : new Date(json['opening_balance_date'])),
        'virtualBalance': !exists(json, 'virtual_balance') ? undefined : json['virtual_balance'],
        'includeNetWorth': !exists(json, 'include_net_worth') ? undefined : json['include_net_worth'],
        'creditCardType': !exists(json, 'credit_card_type') ? undefined : CreditCardTypeFromJSON(json['credit_card_type']),
        'monthlyPaymentDate': !exists(json, 'monthly_payment_date') ? undefined : (json['monthly_payment_date'] === null ? null : new Date(json['monthly_payment_date'])),
        'liabilityType': !exists(json, 'liability_type') ? undefined : LiabilityTypeFromJSON(json['liability_type']),
        'liabilityDirection': !exists(json, 'liability_direction') ? undefined : LiabilityDirectionFromJSON(json['liability_direction']),
        'interest': !exists(json, 'interest') ? undefined : json['interest'],
        'interestPeriod': !exists(json, 'interest_period') ? undefined : InterestPeriodFromJSON(json['interest_period']),
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
        'latitude': !exists(json, 'latitude') ? undefined : json['latitude'],
        'longitude': !exists(json, 'longitude') ? undefined : json['longitude'],
        'zoomLevel': !exists(json, 'zoom_level') ? undefined : json['zoom_level'],
    };
}

export function AccountToJSON(value?: Account | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'active': value.active,
        'order': value.order,
        'name': value.name,
        'type': ShortAccountTypePropertyToJSON(value.type),
        'account_role': AccountRolePropertyToJSON(value.accountRole),
        'currency_id': value.currencyId,
        'currency_code': value.currencyCode,
        'iban': value.iban,
        'bic': value.bic,
        'account_number': value.accountNumber,
        'opening_balance': value.openingBalance,
        'current_debt': value.currentDebt,
        'opening_balance_date': value.openingBalanceDate === undefined ? undefined : (value.openingBalanceDate === null ? null : value.openingBalanceDate.toISOString()),
        'virtual_balance': value.virtualBalance,
        'include_net_worth': value.includeNetWorth,
        'credit_card_type': CreditCardTypeToJSON(value.creditCardType),
        'monthly_payment_date': value.monthlyPaymentDate === undefined ? undefined : (value.monthlyPaymentDate === null ? null : value.monthlyPaymentDate.toISOString()),
        'liability_type': LiabilityTypeToJSON(value.liabilityType),
        'liability_direction': LiabilityDirectionToJSON(value.liabilityDirection),
        'interest': value.interest,
        'interest_period': InterestPeriodToJSON(value.interestPeriod),
        'notes': value.notes,
        'latitude': value.latitude,
        'longitude': value.longitude,
        'zoom_level': value.zoomLevel,
    };
}

