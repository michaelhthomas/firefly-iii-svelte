/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v2.0.10
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-12-21T01:54:06+00:00  Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: 2.0.10
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TransactionLink
 */
export interface TransactionLink {
    /**
     * 
     * @type {Date}
     * @memberof TransactionLink
     */
    readonly createdAt?: Date;
    /**
     * 
     * @type {Date}
     * @memberof TransactionLink
     */
    readonly updatedAt?: Date;
    /**
     * The link type ID to use. You can also use the link_type_name field.
     * @type {string}
     * @memberof TransactionLink
     */
    linkTypeId: string;
    /**
     * The link type name to use. You can also use the link_type_id field.
     * @type {string}
     * @memberof TransactionLink
     */
    linkTypeName?: string;
    /**
     * The inward transaction transaction_journal_id for the link. This becomes the 'is paid by' transaction of the set.
     * @type {string}
     * @memberof TransactionLink
     */
    inwardId: string;
    /**
     * The outward transaction transaction_journal_id for the link. This becomes the 'pays for' transaction of the set.
     * @type {string}
     * @memberof TransactionLink
     */
    outwardId: string;
    /**
     * Optional. Some notes.
     * @type {string}
     * @memberof TransactionLink
     */
    notes?: string | null;
}

/**
 * Check if a given object implements the TransactionLink interface.
 */
export function instanceOfTransactionLink(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "linkTypeId" in value;
    isInstance = isInstance && "inwardId" in value;
    isInstance = isInstance && "outwardId" in value;

    return isInstance;
}

export function TransactionLinkFromJSON(json: any): TransactionLink {
    return TransactionLinkFromJSONTyped(json, false);
}

export function TransactionLinkFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionLink {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'updatedAt': !exists(json, 'updated_at') ? undefined : (new Date(json['updated_at'])),
        'linkTypeId': json['link_type_id'],
        'linkTypeName': !exists(json, 'link_type_name') ? undefined : json['link_type_name'],
        'inwardId': json['inward_id'],
        'outwardId': json['outward_id'],
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
    };
}

export function TransactionLinkToJSON(value?: TransactionLink | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'link_type_id': value.linkTypeId,
        'link_type_name': value.linkTypeName,
        'inward_id': value.inwardId,
        'outward_id': value.outwardId,
        'notes': value.notes,
    };
}

