/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v2.0.10
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-10-15T12:13:25+00:00  Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: 2.0.10
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BudgetLimitStore
 */
export interface BudgetLimitStore {
    /**
     * Use either currency_id or currency_code. Defaults to the user's default currency.
     * @type {string}
     * @memberof BudgetLimitStore
     */
    currencyId?: string;
    /**
     * Use either currency_id or currency_code. Defaults to the user's default currency.
     * @type {string}
     * @memberof BudgetLimitStore
     */
    currencyCode?: string;
    /**
     * The budget ID of the associated budget.
     * @type {string}
     * @memberof BudgetLimitStore
     */
    readonly budgetId: string;
    /**
     * Start date of the budget limit.
     * @type {Date}
     * @memberof BudgetLimitStore
     */
    start: Date;
    /**
     * Period of the budget limit. Only used when auto-generated by auto-budget.
     * @type {string}
     * @memberof BudgetLimitStore
     */
    readonly period?: string | null;
    /**
     * End date of the budget limit.
     * @type {Date}
     * @memberof BudgetLimitStore
     */
    end: Date;
    /**
     * 
     * @type {string}
     * @memberof BudgetLimitStore
     */
    amount: string;
}

/**
 * Check if a given object implements the BudgetLimitStore interface.
 */
export function instanceOfBudgetLimitStore(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "budgetId" in value;
    isInstance = isInstance && "start" in value;
    isInstance = isInstance && "end" in value;
    isInstance = isInstance && "amount" in value;

    return isInstance;
}

export function BudgetLimitStoreFromJSON(json: any): BudgetLimitStore {
    return BudgetLimitStoreFromJSONTyped(json, false);
}

export function BudgetLimitStoreFromJSONTyped(json: any, ignoreDiscriminator: boolean): BudgetLimitStore {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'currencyId': !exists(json, 'currency_id') ? undefined : json['currency_id'],
        'currencyCode': !exists(json, 'currency_code') ? undefined : json['currency_code'],
        'budgetId': json['budget_id'],
        'start': (new Date(json['start'])),
        'period': !exists(json, 'period') ? undefined : json['period'],
        'end': (new Date(json['end'])),
        'amount': json['amount'],
    };
}

export function BudgetLimitStoreToJSON(value?: BudgetLimitStore | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'currency_id': value.currencyId,
        'currency_code': value.currencyCode,
        'start': (value.start.toISOString().substring(0,10)),
        'end': (value.end.toISOString().substring(0,10)),
        'amount': value.amount,
    };
}

