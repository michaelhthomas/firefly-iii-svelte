/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v2.0.10
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-12-21T01:54:06+00:00  Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: 2.0.10
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CurrencyUpdate
 */
export interface CurrencyUpdate {
    /**
     * If the currency is enabled
     * @type {boolean}
     * @memberof CurrencyUpdate
     */
    enabled?: boolean;
    /**
     * If the currency must be the default for the user. You can only submit TRUE. Submitting FALSE will not drop this currency as the default currency, because then the system would be without one.
     * @type {boolean}
     * @memberof CurrencyUpdate
     */
    _default?: boolean;
    /**
     * The currency code
     * @type {string}
     * @memberof CurrencyUpdate
     */
    code?: string;
    /**
     * The currency name
     * @type {string}
     * @memberof CurrencyUpdate
     */
    name?: string;
    /**
     * The currency symbol
     * @type {string}
     * @memberof CurrencyUpdate
     */
    symbol?: string;
    /**
     * How many decimals to use when displaying this currency. Between 0 and 16.
     * @type {number}
     * @memberof CurrencyUpdate
     */
    decimalPlaces?: number;
}

/**
 * Check if a given object implements the CurrencyUpdate interface.
 */
export function instanceOfCurrencyUpdate(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function CurrencyUpdateFromJSON(json: any): CurrencyUpdate {
    return CurrencyUpdateFromJSONTyped(json, false);
}

export function CurrencyUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): CurrencyUpdate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        '_default': !exists(json, 'default') ? undefined : json['default'],
        'code': !exists(json, 'code') ? undefined : json['code'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'symbol': !exists(json, 'symbol') ? undefined : json['symbol'],
        'decimalPlaces': !exists(json, 'decimal_places') ? undefined : json['decimal_places'],
    };
}

export function CurrencyUpdateToJSON(value?: CurrencyUpdate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'enabled': value.enabled,
        'default': value._default,
        'code': value.code,
        'name': value.name,
        'symbol': value.symbol,
        'decimal_places': value.decimalPlaces,
    };
}

