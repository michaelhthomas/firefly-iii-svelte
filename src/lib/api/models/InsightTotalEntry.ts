/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v2.0.10
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-12-21T01:54:06+00:00  Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: 2.0.10
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface InsightTotalEntry
 */
export interface InsightTotalEntry {
    /**
     * The amount spent between start date and end date, defined as a string, for this expense account and all asset accounts.
     * @type {string}
     * @memberof InsightTotalEntry
     */
    difference?: string;
    /**
     * The amount spent between start date and end date, defined as a string, for this expense account and all asset accounts. This number is a float (double) and may have rounding errors.
     * @type {number}
     * @memberof InsightTotalEntry
     */
    differenceFloat?: number;
    /**
     * The currency ID of the expenses listed for this expense account.
     * @type {string}
     * @memberof InsightTotalEntry
     */
    currencyId?: string;
    /**
     * The currency code of the expenses listed for this expense account.
     * @type {string}
     * @memberof InsightTotalEntry
     */
    currencyCode?: string;
}

/**
 * Check if a given object implements the InsightTotalEntry interface.
 */
export function instanceOfInsightTotalEntry(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function InsightTotalEntryFromJSON(json: any): InsightTotalEntry {
    return InsightTotalEntryFromJSONTyped(json, false);
}

export function InsightTotalEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): InsightTotalEntry {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'difference': !exists(json, 'difference') ? undefined : json['difference'],
        'differenceFloat': !exists(json, 'difference_float') ? undefined : json['difference_float'],
        'currencyId': !exists(json, 'currency_id') ? undefined : json['currency_id'],
        'currencyCode': !exists(json, 'currency_code') ? undefined : json['currency_code'],
    };
}

export function InsightTotalEntryToJSON(value?: InsightTotalEntry | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'difference': value.difference,
        'difference_float': value.differenceFloat,
        'currency_id': value.currencyId,
        'currency_code': value.currencyCode,
    };
}

