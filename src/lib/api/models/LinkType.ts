/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v2.0.10
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-12-21T01:54:06+00:00  Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: 2.0.10
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface LinkType
 */
export interface LinkType {
    /**
     * 
     * @type {string}
     * @memberof LinkType
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof LinkType
     */
    inward: string;
    /**
     * 
     * @type {string}
     * @memberof LinkType
     */
    outward: string;
    /**
     * 
     * @type {boolean}
     * @memberof LinkType
     */
    readonly editable?: boolean;
}

/**
 * Check if a given object implements the LinkType interface.
 */
export function instanceOfLinkType(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "inward" in value;
    isInstance = isInstance && "outward" in value;

    return isInstance;
}

export function LinkTypeFromJSON(json: any): LinkType {
    return LinkTypeFromJSONTyped(json, false);
}

export function LinkTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): LinkType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'inward': json['inward'],
        'outward': json['outward'],
        'editable': !exists(json, 'editable') ? undefined : json['editable'],
    };
}

export function LinkTypeToJSON(value?: LinkType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'inward': value.inward,
        'outward': value.outward,
    };
}

