/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v2.0.10
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-10-15T12:13:25+00:00  Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: 2.0.10
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AttachmentArray,
  BadRequest,
  BudgetArray,
  BudgetLimit,
  BudgetLimitArray,
  BudgetLimitSingle,
  BudgetLimitStore,
  BudgetSingle,
  BudgetStore,
  BudgetUpdate,
  InternalException,
  NotFound,
  TransactionArray,
  TransactionTypeFilter,
  Unauthenticated,
  ValidationError,
} from '../models/index';
import {
    AttachmentArrayFromJSON,
    AttachmentArrayToJSON,
    BadRequestFromJSON,
    BadRequestToJSON,
    BudgetArrayFromJSON,
    BudgetArrayToJSON,
    BudgetLimitFromJSON,
    BudgetLimitToJSON,
    BudgetLimitArrayFromJSON,
    BudgetLimitArrayToJSON,
    BudgetLimitSingleFromJSON,
    BudgetLimitSingleToJSON,
    BudgetLimitStoreFromJSON,
    BudgetLimitStoreToJSON,
    BudgetSingleFromJSON,
    BudgetSingleToJSON,
    BudgetStoreFromJSON,
    BudgetStoreToJSON,
    BudgetUpdateFromJSON,
    BudgetUpdateToJSON,
    InternalExceptionFromJSON,
    InternalExceptionToJSON,
    NotFoundFromJSON,
    NotFoundToJSON,
    TransactionArrayFromJSON,
    TransactionArrayToJSON,
    TransactionTypeFilterFromJSON,
    TransactionTypeFilterToJSON,
    UnauthenticatedFromJSON,
    UnauthenticatedToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface DeleteBudgetRequest {
    id: string;
    xTraceId?: string;
}

export interface DeleteBudgetLimitRequest {
    id: string;
    limitId: string;
    xTraceId?: string;
}

export interface GetBudgetRequest {
    id: string;
    xTraceId?: string;
    start?: Date;
    end?: Date;
}

export interface GetBudgetLimitRequest {
    id: string;
    limitId: number;
    xTraceId?: string;
}

export interface ListAttachmentByBudgetRequest {
    id: string;
    xTraceId?: string;
    limit?: number;
    page?: number;
}

export interface ListBudgetRequest {
    xTraceId?: string;
    limit?: number;
    page?: number;
    start?: Date;
    end?: Date;
}

export interface ListBudgetLimitRequest {
    start: Date;
    end: Date;
    xTraceId?: string;
}

export interface ListBudgetLimitByBudgetRequest {
    id: string;
    xTraceId?: string;
    start?: Date;
    end?: Date;
}

export interface ListTransactionByBudgetRequest {
    id: string;
    xTraceId?: string;
    limit?: number;
    page?: number;
    start?: Date;
    end?: Date;
    type?: TransactionTypeFilter;
}

export interface ListTransactionByBudgetLimitRequest {
    id: string;
    limitId: string;
    xTraceId?: string;
    limit?: number;
    page?: number;
    type?: TransactionTypeFilter;
}

export interface StoreBudgetRequest {
    budgetStore: BudgetStore;
    xTraceId?: string;
}

export interface StoreBudgetLimitRequest {
    id: string;
    budgetLimitStore: BudgetLimitStore;
    xTraceId?: string;
}

export interface UpdateBudgetRequest {
    id: string;
    budgetUpdate: BudgetUpdate;
    xTraceId?: string;
}

export interface UpdateBudgetLimitRequest {
    id: string;
    limitId: string;
    budgetLimit: BudgetLimit;
    xTraceId?: string;
}

/**
 * 
 */
export class BudgetsApi extends runtime.BaseAPI {

    /**
     * Delete a budget. Transactions will not be deleted.
     * Delete a budget.
     */
    async deleteBudgetRaw(requestParameters: DeleteBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBudget.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTraceId !== undefined && requestParameters.xTraceId !== null) {
            headerParameters['X-Trace-Id'] = String(requestParameters.xTraceId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/budgets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a budget. Transactions will not be deleted.
     * Delete a budget.
     */
    async deleteBudget(requestParameters: DeleteBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBudgetRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a budget limit.
     * Delete a budget limit.
     */
    async deleteBudgetLimitRaw(requestParameters: DeleteBudgetLimitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBudgetLimit.');
        }

        if (requestParameters.limitId === null || requestParameters.limitId === undefined) {
            throw new runtime.RequiredError('limitId','Required parameter requestParameters.limitId was null or undefined when calling deleteBudgetLimit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTraceId !== undefined && requestParameters.xTraceId !== null) {
            headerParameters['X-Trace-Id'] = String(requestParameters.xTraceId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/budgets/{id}/limits/{limitId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"limitId"}}`, encodeURIComponent(String(requestParameters.limitId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a budget limit.
     * Delete a budget limit.
     */
    async deleteBudgetLimit(requestParameters: DeleteBudgetLimitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBudgetLimitRaw(requestParameters, initOverrides);
    }

    /**
     * Get a single budget. If the start date and end date are submitted as well, the \"spent\" array will be updated accordingly.
     * Get a single budget.
     */
    async getBudgetRaw(requestParameters: GetBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BudgetSingle>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBudget.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substring(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTraceId !== undefined && requestParameters.xTraceId !== null) {
            headerParameters['X-Trace-Id'] = String(requestParameters.xTraceId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/budgets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BudgetSingleFromJSON(jsonValue));
    }

    /**
     * Get a single budget. If the start date and end date are submitted as well, the \"spent\" array will be updated accordingly.
     * Get a single budget.
     */
    async getBudget(requestParameters: GetBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BudgetSingle> {
        const response = await this.getBudgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get single budget limit.
     */
    async getBudgetLimitRaw(requestParameters: GetBudgetLimitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BudgetLimitSingle>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBudgetLimit.');
        }

        if (requestParameters.limitId === null || requestParameters.limitId === undefined) {
            throw new runtime.RequiredError('limitId','Required parameter requestParameters.limitId was null or undefined when calling getBudgetLimit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTraceId !== undefined && requestParameters.xTraceId !== null) {
            headerParameters['X-Trace-Id'] = String(requestParameters.xTraceId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/budgets/{id}/limits/{limitId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"limitId"}}`, encodeURIComponent(String(requestParameters.limitId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BudgetLimitSingleFromJSON(jsonValue));
    }

    /**
     * Get single budget limit.
     */
    async getBudgetLimit(requestParameters: GetBudgetLimitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BudgetLimitSingle> {
        const response = await this.getBudgetLimitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all attachments.
     * Lists all attachments of a budget.
     */
    async listAttachmentByBudgetRaw(requestParameters: ListAttachmentByBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttachmentArray>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listAttachmentByBudget.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTraceId !== undefined && requestParameters.xTraceId !== null) {
            headerParameters['X-Trace-Id'] = String(requestParameters.xTraceId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/budgets/{id}/attachments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttachmentArrayFromJSON(jsonValue));
    }

    /**
     * Lists all attachments.
     * Lists all attachments of a budget.
     */
    async listAttachmentByBudget(requestParameters: ListAttachmentByBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttachmentArray> {
        const response = await this.listAttachmentByBudgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the budgets the user has made. If the start date and end date are submitted as well, the \"spent\" array will be updated accordingly.
     * List all budgets.
     */
    async listBudgetRaw(requestParameters: ListBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BudgetArray>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substring(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTraceId !== undefined && requestParameters.xTraceId !== null) {
            headerParameters['X-Trace-Id'] = String(requestParameters.xTraceId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/budgets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BudgetArrayFromJSON(jsonValue));
    }

    /**
     * List all the budgets the user has made. If the start date and end date are submitted as well, the \"spent\" array will be updated accordingly.
     * List all budgets.
     */
    async listBudget(requestParameters: ListBudgetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BudgetArray> {
        const response = await this.listBudgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all budget limits for for this date range. 
     * Get list of budget limits by date
     */
    async listBudgetLimitRaw(requestParameters: ListBudgetLimitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BudgetLimitArray>> {
        if (requestParameters.start === null || requestParameters.start === undefined) {
            throw new runtime.RequiredError('start','Required parameter requestParameters.start was null or undefined when calling listBudgetLimit.');
        }

        if (requestParameters.end === null || requestParameters.end === undefined) {
            throw new runtime.RequiredError('end','Required parameter requestParameters.end was null or undefined when calling listBudgetLimit.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substring(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTraceId !== undefined && requestParameters.xTraceId !== null) {
            headerParameters['X-Trace-Id'] = String(requestParameters.xTraceId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/budget-limits`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BudgetLimitArrayFromJSON(jsonValue));
    }

    /**
     * Get all budget limits for for this date range. 
     * Get list of budget limits by date
     */
    async listBudgetLimit(requestParameters: ListBudgetLimitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BudgetLimitArray> {
        const response = await this.listBudgetLimitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all budget limits for this budget and the money spent, and money left. You can limit the list by submitting a date range as well. The \"spent\" array for each budget limit is NOT influenced by the start and end date of your query, but by the start and end date of the budget limit itself. 
     * Get all limits for a budget.
     */
    async listBudgetLimitByBudgetRaw(requestParameters: ListBudgetLimitByBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BudgetLimitArray>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listBudgetLimitByBudget.');
        }

        const queryParameters: any = {};

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substring(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substring(0,10);
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTraceId !== undefined && requestParameters.xTraceId !== null) {
            headerParameters['X-Trace-Id'] = String(requestParameters.xTraceId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/budgets/{id}/limits`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BudgetLimitArrayFromJSON(jsonValue));
    }

    /**
     * Get all budget limits for this budget and the money spent, and money left. You can limit the list by submitting a date range as well. The \"spent\" array for each budget limit is NOT influenced by the start and end date of your query, but by the start and end date of the budget limit itself. 
     * Get all limits for a budget.
     */
    async listBudgetLimitByBudget(requestParameters: ListBudgetLimitByBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BudgetLimitArray> {
        const response = await this.listBudgetLimitByBudgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all transactions linked to a budget, possibly limited by start and end
     * All transactions to a budget.
     */
    async listTransactionByBudgetRaw(requestParameters: ListTransactionByBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionArray>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listTransactionByBudget.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = (requestParameters.start as any).toISOString().substring(0,10);
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = (requestParameters.end as any).toISOString().substring(0,10);
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTraceId !== undefined && requestParameters.xTraceId !== null) {
            headerParameters['X-Trace-Id'] = String(requestParameters.xTraceId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/budgets/{id}/transactions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionArrayFromJSON(jsonValue));
    }

    /**
     * Get all transactions linked to a budget, possibly limited by start and end
     * All transactions to a budget.
     */
    async listTransactionByBudget(requestParameters: ListTransactionByBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionArray> {
        const response = await this.listTransactionByBudgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all the transactions within one budget limit. The start and end date are dictated by the budget limit.
     * List all transactions by a budget limit ID.
     */
    async listTransactionByBudgetLimitRaw(requestParameters: ListTransactionByBudgetLimitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionArray>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listTransactionByBudgetLimit.');
        }

        if (requestParameters.limitId === null || requestParameters.limitId === undefined) {
            throw new runtime.RequiredError('limitId','Required parameter requestParameters.limitId was null or undefined when calling listTransactionByBudgetLimit.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTraceId !== undefined && requestParameters.xTraceId !== null) {
            headerParameters['X-Trace-Id'] = String(requestParameters.xTraceId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/budgets/{id}/limits/{limitId}/transactions`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"limitId"}}`, encodeURIComponent(String(requestParameters.limitId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionArrayFromJSON(jsonValue));
    }

    /**
     * List all the transactions within one budget limit. The start and end date are dictated by the budget limit.
     * List all transactions by a budget limit ID.
     */
    async listTransactionByBudgetLimit(requestParameters: ListTransactionByBudgetLimitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionArray> {
        const response = await this.listTransactionByBudgetLimitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new budget. The data required can be submitted as a JSON body or as a list of parameters.
     * Store a new budget
     */
    async storeBudgetRaw(requestParameters: StoreBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BudgetSingle>> {
        if (requestParameters.budgetStore === null || requestParameters.budgetStore === undefined) {
            throw new runtime.RequiredError('budgetStore','Required parameter requestParameters.budgetStore was null or undefined when calling storeBudget.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xTraceId !== undefined && requestParameters.xTraceId !== null) {
            headerParameters['X-Trace-Id'] = String(requestParameters.xTraceId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/budgets`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BudgetStoreToJSON(requestParameters.budgetStore),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BudgetSingleFromJSON(jsonValue));
    }

    /**
     * Creates a new budget. The data required can be submitted as a JSON body or as a list of parameters.
     * Store a new budget
     */
    async storeBudget(requestParameters: StoreBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BudgetSingle> {
        const response = await this.storeBudgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Store a new budget limit under this budget.
     * Store new budget limit.
     */
    async storeBudgetLimitRaw(requestParameters: StoreBudgetLimitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BudgetLimitSingle>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling storeBudgetLimit.');
        }

        if (requestParameters.budgetLimitStore === null || requestParameters.budgetLimitStore === undefined) {
            throw new runtime.RequiredError('budgetLimitStore','Required parameter requestParameters.budgetLimitStore was null or undefined when calling storeBudgetLimit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xTraceId !== undefined && requestParameters.xTraceId !== null) {
            headerParameters['X-Trace-Id'] = String(requestParameters.xTraceId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/budgets/{id}/limits`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BudgetLimitStoreToJSON(requestParameters.budgetLimitStore),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BudgetLimitSingleFromJSON(jsonValue));
    }

    /**
     * Store a new budget limit under this budget.
     * Store new budget limit.
     */
    async storeBudgetLimit(requestParameters: StoreBudgetLimitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BudgetLimitSingle> {
        const response = await this.storeBudgetLimitRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update existing budget. This endpoint cannot be used to set budget amount limits.
     * Update existing budget.
     */
    async updateBudgetRaw(requestParameters: UpdateBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BudgetSingle>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateBudget.');
        }

        if (requestParameters.budgetUpdate === null || requestParameters.budgetUpdate === undefined) {
            throw new runtime.RequiredError('budgetUpdate','Required parameter requestParameters.budgetUpdate was null or undefined when calling updateBudget.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xTraceId !== undefined && requestParameters.xTraceId !== null) {
            headerParameters['X-Trace-Id'] = String(requestParameters.xTraceId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/budgets/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BudgetUpdateToJSON(requestParameters.budgetUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BudgetSingleFromJSON(jsonValue));
    }

    /**
     * Update existing budget. This endpoint cannot be used to set budget amount limits.
     * Update existing budget.
     */
    async updateBudget(requestParameters: UpdateBudgetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BudgetSingle> {
        const response = await this.updateBudgetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update existing budget limit.
     * Update existing budget limit.
     */
    async updateBudgetLimitRaw(requestParameters: UpdateBudgetLimitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BudgetLimitSingle>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateBudgetLimit.');
        }

        if (requestParameters.limitId === null || requestParameters.limitId === undefined) {
            throw new runtime.RequiredError('limitId','Required parameter requestParameters.limitId was null or undefined when calling updateBudgetLimit.');
        }

        if (requestParameters.budgetLimit === null || requestParameters.budgetLimit === undefined) {
            throw new runtime.RequiredError('budgetLimit','Required parameter requestParameters.budgetLimit was null or undefined when calling updateBudgetLimit.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xTraceId !== undefined && requestParameters.xTraceId !== null) {
            headerParameters['X-Trace-Id'] = String(requestParameters.xTraceId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/budgets/{id}/limits/{limitId}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"limitId"}}`, encodeURIComponent(String(requestParameters.limitId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BudgetLimitToJSON(requestParameters.budgetLimit),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BudgetLimitSingleFromJSON(jsonValue));
    }

    /**
     * Update existing budget limit.
     * Update existing budget limit.
     */
    async updateBudgetLimit(requestParameters: UpdateBudgetLimitRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BudgetLimitSingle> {
        const response = await this.updateBudgetLimitRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
