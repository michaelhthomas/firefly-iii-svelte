/* tslint:disable */
/* eslint-disable */
/**
 * Firefly III API v2.0.10
 * This is the documentation of the Firefly III API. You can find accompanying documentation on the website of Firefly III itself (see below). Please report any bugs or issues. You may use the \"Authorize\" button to try the API below. This file was last generated on 2023-12-21T01:54:06+00:00  Please keep in mind that the demo site does not accept requests from curl, colly, wget, etc. You must use a browser or a tool like Postman to make requests. Too many script kiddies out there, sorry about that. 
 *
 * The version of the OpenAPI document: 2.0.10
 * Contact: james@firefly-iii.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AttachmentArray,
  BadRequest,
  InternalException,
  NotFound,
  PiggyBankArray,
  PiggyBankEventArray,
  PiggyBankSingle,
  PiggyBankStore,
  PiggyBankUpdate,
  Unauthenticated,
  ValidationError,
} from '../models/index';
import {
    AttachmentArrayFromJSON,
    AttachmentArrayToJSON,
    BadRequestFromJSON,
    BadRequestToJSON,
    InternalExceptionFromJSON,
    InternalExceptionToJSON,
    NotFoundFromJSON,
    NotFoundToJSON,
    PiggyBankArrayFromJSON,
    PiggyBankArrayToJSON,
    PiggyBankEventArrayFromJSON,
    PiggyBankEventArrayToJSON,
    PiggyBankSingleFromJSON,
    PiggyBankSingleToJSON,
    PiggyBankStoreFromJSON,
    PiggyBankStoreToJSON,
    PiggyBankUpdateFromJSON,
    PiggyBankUpdateToJSON,
    UnauthenticatedFromJSON,
    UnauthenticatedToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models/index';

export interface DeletePiggyBankRequest {
    id: string;
    xTraceId?: string;
}

export interface GetPiggyBankRequest {
    id: string;
    xTraceId?: string;
}

export interface ListAttachmentByPiggyBankRequest {
    id: string;
    xTraceId?: string;
    limit?: number;
    page?: number;
}

export interface ListEventByPiggyBankRequest {
    id: string;
    xTraceId?: string;
    limit?: number;
    page?: number;
}

export interface ListPiggyBankRequest {
    xTraceId?: string;
    limit?: number;
    page?: number;
}

export interface StorePiggyBankRequest {
    piggyBankStore: PiggyBankStore;
    xTraceId?: string;
}

export interface UpdatePiggyBankRequest {
    id: string;
    piggyBankUpdate: PiggyBankUpdate;
    xTraceId?: string;
}

/**
 * 
 */
export class PiggyBanksApi extends runtime.BaseAPI {

    /**
     * Delete a piggy bank.
     * Delete a piggy bank.
     */
    async deletePiggyBankRaw(requestParameters: DeletePiggyBankRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePiggyBank.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTraceId !== undefined && requestParameters.xTraceId !== null) {
            headerParameters['X-Trace-Id'] = String(requestParameters.xTraceId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/piggy-banks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a piggy bank.
     * Delete a piggy bank.
     */
    async deletePiggyBank(requestParameters: DeletePiggyBankRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deletePiggyBankRaw(requestParameters, initOverrides);
    }

    /**
     * Get a single piggy bank.
     * Get a single piggy bank.
     */
    async getPiggyBankRaw(requestParameters: GetPiggyBankRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PiggyBankSingle>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPiggyBank.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTraceId !== undefined && requestParameters.xTraceId !== null) {
            headerParameters['X-Trace-Id'] = String(requestParameters.xTraceId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/piggy-banks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PiggyBankSingleFromJSON(jsonValue));
    }

    /**
     * Get a single piggy bank.
     * Get a single piggy bank.
     */
    async getPiggyBank(requestParameters: GetPiggyBankRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PiggyBankSingle> {
        const response = await this.getPiggyBankRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists all attachments.
     * Lists all attachments.
     */
    async listAttachmentByPiggyBankRaw(requestParameters: ListAttachmentByPiggyBankRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AttachmentArray>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listAttachmentByPiggyBank.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTraceId !== undefined && requestParameters.xTraceId !== null) {
            headerParameters['X-Trace-Id'] = String(requestParameters.xTraceId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/piggy-banks/{id}/attachments`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AttachmentArrayFromJSON(jsonValue));
    }

    /**
     * Lists all attachments.
     * Lists all attachments.
     */
    async listAttachmentByPiggyBank(requestParameters: ListAttachmentByPiggyBankRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AttachmentArray> {
        const response = await this.listAttachmentByPiggyBankRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all events linked to a piggy bank (adding and removing money).
     * List all events linked to a piggy bank.
     */
    async listEventByPiggyBankRaw(requestParameters: ListEventByPiggyBankRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PiggyBankEventArray>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listEventByPiggyBank.');
        }

        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTraceId !== undefined && requestParameters.xTraceId !== null) {
            headerParameters['X-Trace-Id'] = String(requestParameters.xTraceId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/piggy-banks/{id}/events`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PiggyBankEventArrayFromJSON(jsonValue));
    }

    /**
     * List all events linked to a piggy bank (adding and removing money).
     * List all events linked to a piggy bank.
     */
    async listEventByPiggyBank(requestParameters: ListEventByPiggyBankRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PiggyBankEventArray> {
        const response = await this.listEventByPiggyBankRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all piggy banks.
     * List all piggy banks.
     */
    async listPiggyBankRaw(requestParameters: ListPiggyBankRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PiggyBankArray>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xTraceId !== undefined && requestParameters.xTraceId !== null) {
            headerParameters['X-Trace-Id'] = String(requestParameters.xTraceId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/piggy-banks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PiggyBankArrayFromJSON(jsonValue));
    }

    /**
     * List all piggy banks.
     * List all piggy banks.
     */
    async listPiggyBank(requestParameters: ListPiggyBankRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PiggyBankArray> {
        const response = await this.listPiggyBankRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new piggy bank. The data required can be submitted as a JSON body or as a list of parameters.
     * Store a new piggy bank
     */
    async storePiggyBankRaw(requestParameters: StorePiggyBankRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PiggyBankSingle>> {
        if (requestParameters.piggyBankStore === null || requestParameters.piggyBankStore === undefined) {
            throw new runtime.RequiredError('piggyBankStore','Required parameter requestParameters.piggyBankStore was null or undefined when calling storePiggyBank.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xTraceId !== undefined && requestParameters.xTraceId !== null) {
            headerParameters['X-Trace-Id'] = String(requestParameters.xTraceId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/piggy-banks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PiggyBankStoreToJSON(requestParameters.piggyBankStore),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PiggyBankSingleFromJSON(jsonValue));
    }

    /**
     * Creates a new piggy bank. The data required can be submitted as a JSON body or as a list of parameters.
     * Store a new piggy bank
     */
    async storePiggyBank(requestParameters: StorePiggyBankRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PiggyBankSingle> {
        const response = await this.storePiggyBankRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update existing piggy bank.
     * Update existing piggy bank.
     */
    async updatePiggyBankRaw(requestParameters: UpdatePiggyBankRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PiggyBankSingle>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePiggyBank.');
        }

        if (requestParameters.piggyBankUpdate === null || requestParameters.piggyBankUpdate === undefined) {
            throw new runtime.RequiredError('piggyBankUpdate','Required parameter requestParameters.piggyBankUpdate was null or undefined when calling updatePiggyBank.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xTraceId !== undefined && requestParameters.xTraceId !== null) {
            headerParameters['X-Trace-Id'] = String(requestParameters.xTraceId);
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("firefly_iii_auth", []);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("local_bearer_auth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/piggy-banks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PiggyBankUpdateToJSON(requestParameters.piggyBankUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PiggyBankSingleFromJSON(jsonValue));
    }

    /**
     * Update existing piggy bank.
     * Update existing piggy bank.
     */
    async updatePiggyBank(requestParameters: UpdatePiggyBankRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PiggyBankSingle> {
        const response = await this.updatePiggyBankRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
